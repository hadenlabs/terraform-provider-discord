run:
  timeout: 5m
  deadline: 5m
  tests: true
  skip-dirs-use-default: true
  modules-download-mode: readonly

output:
  format: colored-line-number

linters:
  enable:
    - bodyclose # ensure HTTP response bodies are successfully closed.
    - contextcheck # check we are passing context an inherited context.
    - gofmt # checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification.
    - errname # checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`.
    - errcheck # a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases.
    - errorlint # used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - godot # check if comments end in a period.
    - misspell # finds commonly misspelled English words in comments.
    - nilerr # checks that there is no simultaneous return of nil error and an invalid value.
    - tparallel # detects inappropriate usage of t.Parallel() method in your Go test codes.
    - unparam # reports unused function parameters.
    - whitespace # detection of leading and trailing whitespace.

linters-settings:
  govet:
    # report about shadowed variables
    check-shadowing: true

  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true

  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/hadenlabs/

  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 10

  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true

  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100

  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 5

  lll:
    # tab width in spaces. Default to 1.
    tab-width: 1

  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false

  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30

  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default

  gocritic:
    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint` run to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - performance

    settings: # settings passed to gocritic
      captLocal: # must be valid enabled check name
        paramsOnly: true
      rangeValCopy:
        sizeThreshold: 32

  misspell:
    locale: US

  presets:
    - bugs
    - unused
  fast: false
  disable:
    - gomnd
    - funlen
    - maligned
    - wsl
    - testpackage
    - goerr113
    - scopelint
    - golint

    # Drives todos nuts
    - godox
  errcheck:
    exclude-functions:
      # fine to ignore in errcheck as tfproviderlint covers this
      - (*github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema.ResourceData).Set

issues:
  # Excluding configuration per-path and per-linter
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test(ing)?\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - scopelint
        - unparam
        - golint

    # - text: "should have a package comment"
    #   linters:
    #     - golint

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0
